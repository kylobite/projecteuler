import Data.Char (digitToInt)

-- Problem 1
p1 = sum $ filter (\x -> rem x 3 == 0 || rem x 5 == 0) [1..999]

-- Problem 2
fib a b = [a,b] ++ fib' b (a + b) where
    fib' a b = [b] ++ fib' b (a + b)

p2 = sum $ filter even $ takeWhile (<=4000000) $ fib 1 2

-- Problem 3
p3 n = p3' n 2 [] where
    p3' n x c | n == x = (x:c)
              | n `rem` x == 0 = p3' (div n x) x (x:c)
              | otherwise = p3' n (succ x) c

-- Problem 4
palindromes = reverse $ (pd 1 9) ++ (pd 2 7)

pd a b = concat $ map (\y -> map (\x -> y ++ x ++ reverse y) $ map (concat.replicate a) $ map show [0..b]) $ map show [10..99]

p4 = f (map (\x -> read x :: Int) palindromes) (reverse [100..999]) where
        f x y = if length (filter (\z -> rem (head x) z == 0 && (length $ show $ div (head x) z) == 3) y) > 0
                then head x
                else f (tail x) y

-- Problem 5
p5 n = foldl1 lcm [2..n]

-- Problem 6
p6 n = (sum [1..n] * sum [1..n]) - sum [x * x | x <- [1..n]]

-- Problem 7
primes = [2] ++ filter test [3,5..] where
	test x = not $ or $ map (\y -> rem x y == 0) [2..x - 1]

p7 n = last $ take n primes

-- Problem 8
p8 = let a = "7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450"
	 in maximum $ get' g [] where
	    get' :: String -> [Int] -> [Int]
	    get' (_:_:_:_:[]) c = reverse c
	    get' (x:xs) c       = get' xs (((digitToInt x) * (product $ (map (read . (:"")) (take 4 xs) :: [Int]))):c)
